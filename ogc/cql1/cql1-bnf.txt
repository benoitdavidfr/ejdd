BNF definition of OGC_Common Query Language [OGC 07-006r1, pp. 11-16]
=====================================================================

<SQL terminal character> ::= <SQL language character>
<SQL language character> ::= '[A-Za-z0-9]' | <SQL special character>
<SQL special character> ::= '[ "%&\'()*+,-./:;<=>?\[\]^_|{}]'
<space> ::= ' '
<digit> ::= '[0-9]'
<separator> ::= { <comment> | <space> | <newline> }

/* The next section of the BNF defines the tokens available to the language.
   I have deleted the concepts of bit string, hex string and national character string literal.
  Keywords have been added to support the geo literals. */
<token> ::= <nondelimiter token>
          | <delimiter token>
<nondelimiter token> ::= <regular identifier>
                      | <key word>
                      | <unsigned numeric literal>
<regular identifier> ::= <identifier body>
<identifier body> ::= <identifier start> [ { <underscore> | <identifier part> } ]
<identifier start> ::= <simple latin letter>
<identifier part> ::= <identifier start> | <digit>
<key word> ::= <reserved word>
<reserved word> ::= AND | POINT | LINESTRING | POLYGON | MULTIPOINT
                  | MULTILINESTRING | MULTIPOLYGON | EMPTY | DATE
                  | TIME | TIMESTAMP | FALSE| TRUE | UNKNOWN | LIKE
                  | MINUTE | MONTH | NOT | NULL
<unsigned numeric literal> ::= <exact numeric literal> | <approximate numeric literal>
<exact numeric literal> ::= <unsigned integer> [<period>[<unsigned integer>]] | <period> <unsigned integer>
<unsigned integer> ::= {<digit>}
<approximate numeric literal> ::= <mantissa> E <exponent>
<mantissa> ::= <exact numeric literal>
<exponent> ::= <signed integer>
<signed integer> ::= [ <sign> ] <unsigned integer>
<sign> ::= '[+-]'
<character string literal> ::= <quote> [ {<character representation>} ] <quote>
<character representation> ::= <nonquote character> | <quote symbol>
<quote symbol> ::= <quote><quote>
/*End of non delimiter tokens*/

/* I have limited the delimiter tokens by eliminating, interval strings and delimited identifiers BNF and simplifying the legal character set
   to the characters to a single set so no identification of character set would be needed decision. */
<delimiter token> ::= <character string literal>
                    | <SQL special character>
                    | <not equals operator>
                    | <greater than or equals operator>
                    | <less than or equals operator>
                    | <concatenation operator>
                    | <double greater than operator>
                    | <right arrow>
                    | <left bracket>
                    | <right bracket>
<character string literal> ::= <quote> [ {<character representation>} ] <quote>
<character representation> ::= <nonquote character> | <quote symbol>
<quote symbol> ::= <quote><quote>
<not equals operator> ::= <>
<greater than or equals operator> ::= >=
<less than or equals operator> ::= <=

/* The following section is intended to give context for identifier and namespaces. It assumes that the default namespace is specified in the
   query request and does not allow any overrides of the namepace */
<identifier> ::= <identifier start [ { <colon> | <identifier part> } ]
<identifier start> ::= <simple Latin letter>
<identifier part> ::= <simple Latin letter> | <digit>
<attribute name> ::= <simple attribute name> | <compound attribute name>
<simple attribute name> ::= <identifier>
<compound attribute name> ::= <identifier><period> [{<identifier><period>}…]
<simple attribute name>

/*The rest of the BNF is the real BNF for the query capabilities.*/
<search condition> ::= <boolean value expression>
<boolean value expression> ::= <boolean term>
                             | <boolean value expression> OR <boolean term>
<boolean term> ::= <boolean factor>
                 | <boolean term> AND <boolean factor>
<boolean factor> ::= [ NOT ] <boolean primary>
<boolean primary> ::= <predicate> | <routine invocation> | <left paren> <search condition> <right paren>
<predicate> ::= <comparison predicate>
              | <text predicate>
              | <null predicate>
              | <temporal predicate>
              | <classification predicate>
              | <existence_predicate>

/* This set of productions define temporal predicates */
<temporal predicate> ::= <attribute_name> BEFORE <date-time expression>
                       | <attribute_name> BEFORE OR DURING <period>
                       | <attribute_name> DURING <period>
                       | <attribute_name> DURING OR AFTER <period>
                       | <attribute_name> AFTER <date-time expression>
<date-time expression ::= <date-time> | <period>

/* This set of productions enables loose or tight queries. For example the predicate “cloudcover EXISTS” evaluates as true for all record
   instances where the attribute cloudcover is a member of the record schema.
   Similarly, the predicate “cloudcover DOESNOTEXIST” evaluates as true for all record instances where the attribute cloudcover is not a
   member of the record schema.*/

<existence_predicate> := <attribute_name> EXISTS
                       | <attribute_name> DOES-NOT-EXIST
<comparison predicate> ::= <attribute name> <comp op> <literal>
<text predicate> ::= <attribute name> [ NOT ] LIKE <character pattern>
<null predicate> ::= <attribute name> IS [ NOT ] NULL
<character pattern> ::= <character string literal>

/* In a character pattern the character percent is used as a wildcard to represent an arbitrary string. This allows LIKE to
   implement the effect of many characters matching operations, such as: contains, begins with, ends with, not contains, 
   not begins with, not ends with, and so forth. For example:

    attribute like '%contains_this%'
    attribute like '%begins_with_this%'
    attribute like '%ends_with_this'
    attribute like '%d_ve' will match 'dave' or 'dove'
    attribute not like '%will_not_contain_this%'
    attribute not like '%will_not_begin_with_this%'
    attribute not like '%will_not_end_with_this'
*/

<comp op> ::= <equals operator>
            | <not equals operator>
            | <less than operator>
            | <greater than operator>
            | <less than or equals operator>
            | <greater than or equals operator>
<literal> ::= <signed numeric literal>
            | <general literal>
<signed numeric literal> ::= [<sign>] <unsigned numeric literal>
<general literal> ::= <character string literal>
                    | <datetime literal>
                    | <boolean literal>
                    | <geography literal
<boolean literal> ::= TRUE
                    | FALSE
                    | UNKNOWN
<routine invocation> ::= | <geoop name><georoutine argument list>
                       | <relgeoop name><relgeoop argument list>
                       | <routine name><argument list>
<routine name> ::= < attribute name>
<geoop name> ::= EQUALS | DISJOINT | INTERSECTS | TOUCHES | CROSSES
               | WITHIN | CONTAINS | OVERLAPS | RELATE
<relgeoop name> ::= DWITHIN | BEYOND
<argument list> ::= <left paren> [<positional arguments>] <right paren>
<positional arguments> ::= <argument> [ { <comma> <argument> } ]
<argument> ::= <literal> | <attribute name>
<georoutine argument list> ::= <left paren><attribute name><comma><geometry literal><right paren>
<relgeoop argument list> ::= <left paren> <attribute name><comma><geometry literal><comma><tolerance> <right paren>
<tolerance> ::= <unsigned numeric literal><comma><distance units>
<distance units> ::= = “feet” | “meters” | “statute miles” | “nautical miles” | “kilometers”

/*this set of units is just an example. The real list of distance unit must be developed*/
<geometry literal> := <Point Tagged Text>
                    | <LineString Tagged Text>
                    | <Polygon Tagged Text>
                    | <MultiPoint Tagged Text>
                    | <MultiLineString Tagged Text>
                    | <MultiPolygon Tagged Text>
                    | <GeometryCollection Tagged Text>
                    | <Envelope Tagged Text>
<Point Tagged Text> := POINT <Point Text>
<LineString Tagged Text> := LINESTRING <LineString Text>
<Polygon Tagged Text> := POLYGON <Polygon Text>
<MultiPoint Tagged Text> := MULTIPOINT <Multipoint Text>
<MultiLineString Tagged Text> := MULTILINESTRING <MultiLineString Text>
<MultiPolygon Tagged Text> := MULTIPOLYGON <MultiPolygon Text>
<GeometryCollection Tagged Text> := GEOMETRYCOLLECTION <GeometryCollection Text>
<Point Text> := EMPTY | <left paren> <Point> <right paren>
<Point> := <x><space><y>
<x> := numeric literal
<y> := numeric literal
<LineString Text> := EMPTY | <left paren> <Point> {<comma><Point >} <right paren>
<Polygon Text> := EMPTY | <left paren> <LineString Text> {<comma><LineString Text>} <right paren>
<Multipoint Text> := EMPTY | <left paren> <Point Text> {<comma><Point Text >} <right paren>
<MultiLineString Text> := EMPTY | <left paren> <LineString Text> {<comma><LineString Text>} <right paren>
<MultiPolygon Text> := EMPTY | <left paren> <Polygon Text> {<comma><Polygon Text>} <right paren>
<GeometryCollection Text> := EMPTY | <left paren> <geometry literal> {<comma><geometry literal>} <right paren>
<Envelope Tagged Text> ::= ENVELOPE <Envelope Text>
<Envelope Text> := EMPTY
          | <left paren> <WestBoundLongitude><comma> <EastBoundLongitude><comma> <NorthBoundLatitude><comma> <SouthBoundLatitude> <right paren>
<WestBoundLongitude> := <signed numeric literal>
<EastBoundLongitude> := <signed numeric literal>
<NorthBoundLatitude> := <signed numeric literal>
<SouthBoundLatitude> := <signed numeric literal>
<date-time> ::= <full-date> "T" <UTC-time>
<full_date> ::= <date-year> "-" <date-month> "-" <date-day>
<date-year> ::= <digit><digit><digit><digit>
<date-month> ::= <digit><digit>
<date-day> ::= <digit><digit>
<UTC-time> ::= <time-hour> ":" <time-minute> ":" <time-second> "Z"
<time-hour> ::= <digit><digit>
<time-minute> ::= <digit><digit>
<time-second> ::= <digit><digit>[.{<digit>}]
<duration> ::= "P" (<dur-date> | <dur-time>)
<dur-date> ::= <dur-day> | <dur-month> | <dur-year> [<dur-time>]
<dur-day> ::= {<digit>} "D"
<dur-month> ::= {<digit>} "M" [<dur-day>]
<dur-year> ::= {<digit>} "Y" [<dur-month>]
<dur-time> ::= "T" (<dir-hour> | <dur-minute> | <dur-second>)
<dur-hour> ::= {<digit>} "H" [<dur-minute>]
<dur-minute> ::= {<digit>} "M" [<dur-second>]
<dur-second> ::= {<digit>} "S"
<period> ::= <date-time> "/" <date-time> | <date-time> "/" <duration> | <duration> "/" <date-time>
